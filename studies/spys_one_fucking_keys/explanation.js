eval(function (p, r, o, x, y, s) {
    y = function (c) {
        // r is constant 60
        // console.log(`c: ${c}`); // decreasing from 59 to 0 - from 59 to 10 by one, from 9 below by one every 2 calls
        // console.log("----");

        // first round brackets always returns empty string. c < r is constantly true so y func would never be called
        // return (c < r ? "" : y(parseInt(c / r))) + 

        // c = c % r is always simply returning c value
        // return "" + ((c = c % r) > 35 ? 
        return c > 35 ? 
            String.fromCharCode(c + 29) : c.toString(36);

        // CONCLUSION: 
        // whole function returns custom alphabet below - numbers are duplicated because y func is called twice for each 10-0 arg
        // when using in further code this string should be reversed
        // XWVUTSRQPONMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba9876543210
    };

    // if (!"".replace(/^/, String)) { // condition always returns true so if stagement can be removed
    
    // building keys table
    while (o--) { // execute loop 60 times with o eq 59 to 0
        // s is dictionary where keys are generated by y func
        // keys: XWVUTSRQPONMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba9876543210
        // values: they are taken from x argument if it is not empty
        s[y(o)] = x[o] || y(o);
    }
    console.log('s: ', s);

    // this function takes key name to s array and returns its value
    x = [function (y) {
        console.log(`key: ${y}`);
        console.log(`value: ${s[y]}`);
        return s[y];
    }];

    // complexity boost
    // y = function () {
    //     return "\\w+";
    // };

    // o was previously set to 0 by while loop above, anoder complexity boost. o can be still 0 because while will decrement it either
    // while loop below can be removed because it will execute only once with o eq to 0
    // o = 1;
    // while (o--) {
    // every operation that uses o can be simplified by replacing o with 0
    // if (x[o]) { // can be replaced with s[0] but it is always true so we can remove whole if stagement

    // expression uses y func that simply returns "\\w+", patter can be simplified
    // p = p.replace(new RegExp("\\b" + y(0) + "\\b", "g"), x[0]);
    // pattern matches every characer that is letter or number
    // then method replaces matched value with content of keyvaluepair from s dictionary
    p = p.replace(new RegExp("\\b\\w+\\b", "g"), x[0]);
    
    // p output value:
    // Two=2;One4Two=6306^1337;NineTwoSeven=1740^8080;TwoSixNine=4963^3129;Eight=6;Nine1Six=8365^443;One=3;FiveZeroFive=8001^81;Zero=9;Three1Four=8809^8090;ZeroZeroEight=5944^808;Zero2Zero=4948^9090;SevenFiveThree=10778^3127;Five=1;Six=4;Seven=5;Nine=7;Four=0;ZeroNineOne=10171^8118;Three=8;NineTwoTwoEight=Four^ZeroNineOne;Zero8OneFour=Five^TwoSixNine;OneTwoSevenThree=Two^One4Two;EightThreeZeroZero=One^Three1Four;Zero2NineTwo=Six^FiveZeroFive;Seven2FiveOne=Seven^Zero2Zero;TwoEightFourNine=Eight^Nine1Six;Seven4SixSeven=Nine^SevenFiveThree;Seven0ThreeSix=Three^ZeroZeroEight;Six7EightFive=Zero^NineTwoSeven;
    // this output is then evaluated and all variables with messed names is used to calculate port numbers
    // eg. (Nine0SixSeven^OneFourTwo)+(Nine0SixSeven^OneFourTwo)+(Nine0SixSeven^OneFourTwo)
    // this should be calculating by adding converting each bracket result to string, that will give you encrypted port number

    return p;
}("f=2;b=D^H;h=F^I;g=C^G;t=6;s=L^E;a=3;d=K^w;p=9;m=v^u;o=x^y;l=B^A;n=z^J;k=1;c=4;e=5;q=7;i=0;j=X^T;r=8;M=i^j;N=k^g;Q=f^b;R=a^m;P=c^d;O=e^l;S=t^s;W=q^n;V=r^o;U=p^h;", 60, 60, "^^^^^^^^^^One^One4Two^Six^FiveZeroFive^Seven^Two^TwoSixNine^NineTwoSeven^Four^ZeroNineOne^Five^Zero2Zero^Three1Four^SevenFiveThree^ZeroZeroEight^Zero^Nine^Three^Nine1Six^Eight^8090^8809^81^5944^808^10778^9090^4948^4963^6306^443^1740^3129^1337^8080^3127^8001^8365^NineTwoTwoEight^Zero8OneFour^Seven2FiveOne^Zero2NineTwo^OneTwoSevenThree^EightThreeZeroZero^TwoEightFourNine^8118^Six7EightFive^Seven0ThreeSix^Seven4SixSeven^10171".split("^"), 0, {}));

// function params assigned to its variables
p = "f=2;b=D^H;h=F^I;g=C^G;t=6;s=L^E;a=3;d=K^w;p=9;m=v^u;o=x^y;l=B^A;n=z^J;k=1;c=4;e=5;q=7;i=0;j=X^T;r=8;M=i^j;N=k^g;Q=f^b;R=a^m;P=c^d;O=e^l;S=t^s;W=q^n;V=r^o;U=p^h;"
r = 60
o = 60
x = "^^^^^^^^^^One^One4Two^Six^FiveZeroFive^Seven^Two^TwoSixNine^NineTwoSeven^Four^ZeroNineOne^Five^Zero2Zero^Three1Four^SevenFiveThree^ZeroZeroEight^Zero^Nine^Three^Nine1Six^Eight^8090^8809^81^5944^808^10778^9090^4948^4963^6306^443^1740^3129^1337^8080^3127^8001^8365^NineTwoTwoEight^Zero8OneFour^Seven2FiveOne^Zero2NineTwo^OneTwoSevenThree^EightThreeZeroZero^TwoEightFourNine^8118^Six7EightFive^Seven0ThreeSix^Seven4SixSeven^10171".split("^")
y = 0
s = {}

// for deobfuscating (visually) I've used https://deobfuscate.io/
